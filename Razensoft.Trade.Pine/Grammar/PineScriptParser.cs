//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PineScript.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class PineScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COND=1, COND_ELSE=2, OR=3, AND=4, NOT=5, EQ=6, NEQ=7, GT=8, GE=9, LT=10, 
		LE=11, PLUS=12, MINUS=13, MUL=14, DIV=15, MOD=16, COMMA=17, ARROW=18, 
		LPAR=19, RPAR=20, LSQBR=21, RSQBR=22, DEFINE=23, IF_COND=24, IF_COND_ELSE=25, 
		BEGIN=26, END=27, ASSIGN=28, FOR_STMT=29, FOR_STMT_TO=30, FOR_STMT_BY=31, 
		BREAK=32, CONTINUE=33, LBEG=34, LEND=35, PLEND=36, INT_LITERAL=37, FLOAT_LITERAL=38, 
		STR_LITERAL=39, BOOL_LITERAL=40, COLOR_LITERAL=41, ID=42, ID_EX=43, INDENT=44, 
		LINE_CONTINUATION=45, EMPTY_LINE_V1=46, EMPTY_LINE=47, WHITESPACE=48, 
		Tokens=49;
	public const int
		RULE_script = 0, RULE_block = 1, RULE_statement = 2, RULE_variableDeclaration = 3, 
		RULE_variableAssignment = 4, RULE_functionDeclaration = 5, RULE_functionParameters = 6, 
		RULE_functionCall = 7, RULE_functionArguments = 8, RULE_conditional = 9, 
		RULE_loop = 10, RULE_loopBody = 11, RULE_ternary = 12, RULE_expression = 13, 
		RULE_seriesAccess = 14;
	public static readonly string[] ruleNames = {
		"script", "block", "statement", "variableDeclaration", "variableAssignment", 
		"functionDeclaration", "functionParameters", "functionCall", "functionArguments", 
		"conditional", "loop", "loopBody", "ternary", "expression", "seriesAccess"
	};

	private static readonly string[] _LiteralNames = {
		null, "'?'", "':'", "'or'", "'and'", "'not'", "'=='", "'!='", "'>'", "'>='", 
		"'<'", "'<='", "'+'", "'-'", "'*'", "'/'", "'%'", "','", "'=>'", "'('", 
		"')'", "'['", "']'", "'='", "'if'", "'else'", "'|BEGIN|'", "'|END|'", 
		"':='", "'for'", "'to'", "'by'", "'break'", "'continue'", "'|B|'", "'|E|'", 
		"'|PE|'", null, null, null, null, null, null, null, "'|INDENT|'", "'|C|'", 
		"'|EMPTY_V1|'", "'|EMPTY|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COND", "COND_ELSE", "OR", "AND", "NOT", "EQ", "NEQ", "GT", "GE", 
		"LT", "LE", "PLUS", "MINUS", "MUL", "DIV", "MOD", "COMMA", "ARROW", "LPAR", 
		"RPAR", "LSQBR", "RSQBR", "DEFINE", "IF_COND", "IF_COND_ELSE", "BEGIN", 
		"END", "ASSIGN", "FOR_STMT", "FOR_STMT_TO", "FOR_STMT_BY", "BREAK", "CONTINUE", 
		"LBEG", "LEND", "PLEND", "INT_LITERAL", "FLOAT_LITERAL", "STR_LITERAL", 
		"BOOL_LITERAL", "COLOR_LITERAL", "ID", "ID_EX", "INDENT", "LINE_CONTINUATION", 
		"EMPTY_LINE_V1", "EMPTY_LINE", "WHITESPACE", "Tokens"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PineScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PineScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PineScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PineScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 30; statement();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF_COND) | (1L << FOR_STMT) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(PineScriptParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(PineScriptParser.END, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(BEGIN);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 36; statement();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF_COND) | (1L << FOR_STMT) | (1L << ID))) != 0) );
			State = 41; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43; variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44; variableAssignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 45; functionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 46; functionCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 47; conditional();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 48; loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PineScriptParser.ID, 0); }
		public ITerminalNode DEFINE() { return GetToken(PineScriptParser.DEFINE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(ID);
			State = 52; Match(DEFINE);
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 53; expression(0);
				}
				break;
			case 2:
				{
				State = 54; conditional();
				}
				break;
			case 3:
				{
				State = 55; ternary();
				}
				break;
			case 4:
				{
				State = 56; loop();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PineScriptParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PineScriptParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(ID);
			State = 60; Match(ASSIGN);
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 61; expression(0);
				}
				break;
			case 2:
				{
				State = 62; conditional();
				}
				break;
			case 3:
				{
				State = 63; ternary();
				}
				break;
			case 4:
				{
				State = 64; loop();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PineScriptParser.ID, 0); }
		public ITerminalNode LPAR() { return GetToken(PineScriptParser.LPAR, 0); }
		public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(PineScriptParser.RPAR, 0); }
		public ITerminalNode ARROW() { return GetToken(PineScriptParser.ARROW, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(ID);
			State = 68; Match(LPAR);
			State = 69; functionParameters();
			State = 70; Match(RPAR);
			State = 71; Match(ARROW);
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 72; block();
				}
				break;
			case 2:
				{
				State = 73; expression(0);
				}
				break;
			case 3:
				{
				State = 74; ternary();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(PineScriptParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PineScriptParser.ID, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PineScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PineScriptParser.COMMA, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 77; Match(ID);
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 78; Match(COMMA);
					State = 79; Match(ID);
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PineScriptParser.ID, 0); }
		public ITerminalNode LPAR() { return GetToken(PineScriptParser.LPAR, 0); }
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(PineScriptParser.RPAR, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(ID);
			State = 88; Match(LPAR);
			State = 89; functionArguments();
			State = 90; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryContext[] ternary() {
			return GetRuleContexts<TernaryContext>();
		}
		public TernaryContext ternary(int i) {
			return GetRuleContext<TernaryContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PineScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PineScriptParser.COMMA, i);
		}
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionArguments);
		int _la;
		try {
			int _alt;
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << MINUS) | (1L << LPAR) | (1L << INT_LITERAL) | (1L << FLOAT_LITERAL) | (1L << STR_LITERAL) | (1L << BOOL_LITERAL) | (1L << COLOR_LITERAL) | (1L << ID))) != 0)) {
					{
					State = 94;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						State = 92; expression(0);
						}
						break;
					case 2:
						{
						State = 93; ternary();
						}
						break;
					}
					State = 103;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 96; Match(COMMA);
							State = 99;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
							case 1:
								{
								State = 97; expression(0);
								}
								break;
							case 2:
								{
								State = 98; ternary();
								}
								break;
							}
							}
							} 
						}
						State = 105;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 106; Match(COMMA);
						State = 107; variableDeclaration();
						}
						}
						State = 112;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 115; variableDeclaration();
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 116; Match(COMMA);
						State = 117; variableDeclaration();
						}
						}
						State = 122;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		public ITerminalNode IF_COND() { return GetToken(PineScriptParser.IF_COND, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode IF_COND_ELSE() { return GetToken(PineScriptParser.IF_COND_ELSE, 0); }
		public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterConditional(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitConditional(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 18, RULE_conditional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(IF_COND);
			State = 128; expression(0);
			State = 129; block();
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 130; Match(IF_COND_ELSE);
				State = 131; conditional();
				}
				break;
			case 2:
				{
				State = 132; Match(IF_COND_ELSE);
				State = 133; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public ITerminalNode FOR_STMT() { return GetToken(PineScriptParser.FOR_STMT, 0); }
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode FOR_STMT_TO() { return GetToken(PineScriptParser.FOR_STMT_TO, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopBodyContext loopBody() {
			return GetRuleContext<LoopBodyContext>(0);
		}
		public ITerminalNode FOR_STMT_BY() { return GetToken(PineScriptParser.FOR_STMT_BY, 0); }
		public ITerminalNode INT_LITERAL() { return GetToken(PineScriptParser.INT_LITERAL, 0); }
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 20, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(FOR_STMT);
			State = 137; variableDeclaration();
			State = 138; Match(FOR_STMT_TO);
			State = 139; expression(0);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_STMT_BY) {
				{
				State = 140; Match(FOR_STMT_BY);
				State = 141; Match(INT_LITERAL);
				}
			}

			State = 144; loopBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopBodyContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(PineScriptParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(PineScriptParser.END, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] BREAK() { return GetTokens(PineScriptParser.BREAK); }
		public ITerminalNode BREAK(int i) {
			return GetToken(PineScriptParser.BREAK, i);
		}
		public ITerminalNode[] CONTINUE() { return GetTokens(PineScriptParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(PineScriptParser.CONTINUE, i);
		}
		public LoopBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterLoopBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitLoopBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopBodyContext loopBody() {
		LoopBodyContext _localctx = new LoopBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_loopBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(BEGIN);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 150;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IF_COND:
				case FOR_STMT:
				case ID:
					{
					State = 147; statement();
					}
					break;
				case BREAK:
					{
					State = 148; Match(BREAK);
					}
					break;
				case CONTINUE:
					{
					State = 149; Match(CONTINUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF_COND) | (1L << FOR_STMT) | (1L << BREAK) | (1L << CONTINUE) | (1L << ID))) != 0) );
			State = 154; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COND() { return GetToken(PineScriptParser.COND, 0); }
		public ITerminalNode COND_ELSE() { return GetToken(PineScriptParser.COND_ELSE, 0); }
		public ITerminalNode LPAR() { return GetToken(PineScriptParser.LPAR, 0); }
		public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(PineScriptParser.RPAR, 0); }
		public TernaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryContext ternary() {
		TernaryContext _localctx = new TernaryContext(Context, State);
		EnterRule(_localctx, 24, RULE_ternary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; expression(0);
			State = 157; Match(COND);
			State = 158; expression(0);
			State = 159; Match(COND_ELSE);
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 160; Match(LPAR);
				State = 161; ternary();
				State = 162; Match(RPAR);
				}
				break;
			case 2:
				{
				State = 164; ternary();
				}
				break;
			case 3:
				{
				State = 165; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryOperationExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(PineScriptParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(PineScriptParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(PineScriptParser.MOD, 0); }
		public ITerminalNode PLUS() { return GetToken(PineScriptParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(PineScriptParser.MINUS, 0); }
		public ITerminalNode GT() { return GetToken(PineScriptParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(PineScriptParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(PineScriptParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(PineScriptParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(PineScriptParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(PineScriptParser.NEQ, 0); }
		public ITerminalNode OR() { return GetToken(PineScriptParser.OR, 0); }
		public ITerminalNode AND() { return GetToken(PineScriptParser.AND, 0); }
		public BinaryOperationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterBinaryOperationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitBinaryOperationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public ITerminalNode BOOL_LITERAL() { return GetToken(PineScriptParser.BOOL_LITERAL, 0); }
		public ITerminalNode STR_LITERAL() { return GetToken(PineScriptParser.STR_LITERAL, 0); }
		public ITerminalNode COLOR_LITERAL() { return GetToken(PineScriptParser.COLOR_LITERAL, 0); }
		public ITerminalNode INT_LITERAL() { return GetToken(PineScriptParser.INT_LITERAL, 0); }
		public ITerminalNode FLOAT_LITERAL() { return GetToken(PineScriptParser.FLOAT_LITERAL, 0); }
		public ITerminalNode MINUS() { return GetToken(PineScriptParser.MINUS, 0); }
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PineScriptParser.NOT, 0); }
		public ITerminalNode MINUS() { return GetToken(PineScriptParser.MINUS, 0); }
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupExpressionContext : ExpressionContext {
		public ITerminalNode LPAR() { return GetToken(PineScriptParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(PineScriptParser.RPAR, 0); }
		public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GroupExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterGroupExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitGroupExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public SeriesAccessContext seriesAccess() {
			return GetRuleContext<SeriesAccessContext>(0);
		}
		public ITerminalNode ID() { return GetToken(PineScriptParser.ID, 0); }
		public ITerminalNode NOT() { return GetToken(PineScriptParser.NOT, 0); }
		public ITerminalNode MINUS() { return GetToken(PineScriptParser.MINUS, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 176;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MINUS:
				case INT_LITERAL:
				case FLOAT_LITERAL:
					{
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MINUS) {
						{
						State = 169; Match(MINUS);
						}
					}

					State = 172;
					_la = TokenStream.LA(1);
					if ( !(_la==INT_LITERAL || _la==FLOAT_LITERAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case BOOL_LITERAL:
					{
					State = 173; Match(BOOL_LITERAL);
					}
					break;
				case STR_LITERAL:
					{
					State = 174; Match(STR_LITERAL);
					}
					break;
				case COLOR_LITERAL:
					{
					State = 175; Match(COLOR_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				_localctx = new CallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT || _la==MINUS) {
					{
					State = 178;
					_la = TokenStream.LA(1);
					if ( !(_la==NOT || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 181; functionCall();
				}
				break;
			case 3:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT || _la==MINUS) {
					{
					State = 182;
					_la = TokenStream.LA(1);
					if ( !(_la==NOT || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 187;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 185; seriesAccess();
					}
					break;
				case 2:
					{
					State = 186; Match(ID);
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new GroupExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 189; Match(LPAR);
				State = 192;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 190; ternary();
					}
					break;
				case 2:
					{
					State = 191; expression(0);
					}
					break;
				}
				State = 194; Match(RPAR);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 216;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 198;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 199;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 200; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 202;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 203; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 204;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 205;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 206; expression(5);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 207;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 208;
						_la = TokenStream.LA(1);
						if ( !(_la==EQ || _la==NEQ) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 209; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 210;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 211; Match(OR);
						State = 212; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 213;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 214; Match(AND);
						State = 215; expression(2);
						}
						break;
					}
					} 
				}
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SeriesAccessContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PineScriptParser.ID, 0); }
		public ITerminalNode LSQBR() { return GetToken(PineScriptParser.LSQBR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RSQBR() { return GetToken(PineScriptParser.RSQBR, 0); }
		public SeriesAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seriesAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterSeriesAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitSeriesAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeriesAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeriesAccessContext seriesAccess() {
		SeriesAccessContext _localctx = new SeriesAccessContext(Context, State);
		EnterRule(_localctx, 28, RULE_seriesAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(ID);
			State = 222; Match(LSQBR);
			State = 223; expression(0);
			State = 224; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x33', '\xE5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x6', '\x2', '\"', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '#', 
		'\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '(', '\n', '\x3', '\r', '\x3', 
		'\xE', '\x3', ')', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x34', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '<', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\x44', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', 'N', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', 'S', '\n', '\b', '\f', '\b', '\xE', '\b', 'V', '\v', '\b', '\x5', 
		'\b', 'X', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x61', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x66', '\n', '\n', 
		'\a', '\n', 'h', '\n', '\n', '\f', '\n', '\xE', '\n', 'k', '\v', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', 'o', '\n', '\n', '\f', '\n', '\xE', 
		'\n', 'r', '\v', '\n', '\x5', '\n', 't', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', 'y', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'|', '\v', '\n', '\x5', '\n', '~', '\n', '\n', '\x5', '\n', '\x80', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x89', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\x91', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x6', '\r', '\x99', '\n', '\r', '\r', 
		'\r', '\xE', '\r', '\x9A', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xA9', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xAD', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xB3', '\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\xB6', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xBA', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xBE', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xC3', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xC7', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xDB', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\xDE', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x2', '\x3', '\x1C', 
		'\x11', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', '\x2', '\b', '\x3', '\x2', 
		'\'', '(', '\x4', '\x2', '\a', '\a', '\xF', '\xF', '\x3', '\x2', '\x10', 
		'\x12', '\x3', '\x2', '\xE', '\xF', '\x3', '\x2', '\n', '\r', '\x3', '\x2', 
		'\b', '\t', '\x2', '\x107', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x6', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x35', '\x3', '\x2', '\x2', '\x2', '\n', '=', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x45', '\x3', '\x2', '\x2', '\x2', '\xE', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'Y', '\x3', '\x2', '\x2', '\x2', '\x12', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x18', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		' ', '\"', '\x5', '\x6', '\x4', '\x2', '!', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '%', '\'', '\a', '\x1C', '\x2', '\x2', '&', '(', 
		'\x5', '\x6', '\x4', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', 
		')', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\a', '\x1D', '\x2', '\x2', ',', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '-', '\x34', '\x5', '\b', '\x5', '\x2', '.', '\x34', '\x5', '\n', 
		'\x6', '\x2', '/', '\x34', '\x5', '\f', '\a', '\x2', '\x30', '\x34', '\x5', 
		'\x10', '\t', '\x2', '\x31', '\x34', '\x5', '\x14', '\v', '\x2', '\x32', 
		'\x34', '\x5', '\x16', '\f', '\x2', '\x33', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '.', '\x3', '\x2', '\x2', '\x2', '\x33', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x30', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\a', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', ',', '\x2', 
		'\x2', '\x36', ';', '\a', '\x19', '\x2', '\x2', '\x37', '<', '\x5', '\x1C', 
		'\xF', '\x2', '\x38', '<', '\x5', '\x14', '\v', '\x2', '\x39', '<', '\x5', 
		'\x1A', '\xE', '\x2', ':', '<', '\x5', '\x16', '\f', '\x2', ';', '\x37', 
		'\x3', '\x2', '\x2', '\x2', ';', '\x38', '\x3', '\x2', '\x2', '\x2', ';', 
		'\x39', '\x3', '\x2', '\x2', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', '\t', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', ',', '\x2', '\x2', 
		'>', '\x43', '\a', '\x1E', '\x2', '\x2', '?', '\x44', '\x5', '\x1C', '\xF', 
		'\x2', '@', '\x44', '\x5', '\x14', '\v', '\x2', '\x41', '\x44', '\x5', 
		'\x1A', '\xE', '\x2', '\x42', '\x44', '\x5', '\x16', '\f', '\x2', '\x43', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x43', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\v', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', 
		'\a', ',', '\x2', '\x2', '\x46', 'G', '\a', '\x15', '\x2', '\x2', 'G', 
		'H', '\x5', '\xE', '\b', '\x2', 'H', 'I', '\a', '\x16', '\x2', '\x2', 
		'I', 'M', '\a', '\x14', '\x2', '\x2', 'J', 'N', '\x5', '\x4', '\x3', '\x2', 
		'K', 'N', '\x5', '\x1C', '\xF', '\x2', 'L', 'N', '\x5', '\x1A', '\xE', 
		'\x2', 'M', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 'N', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'T', '\a', ',', '\x2', '\x2', 'P', 'Q', '\a', '\x13', 
		'\x2', '\x2', 'Q', 'S', '\a', ',', '\x2', '\x2', 'R', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'Y', 'Z', '\a', ',', '\x2', '\x2', 'Z', '[', '\a', 
		'\x15', '\x2', '\x2', '[', '\\', '\x5', '\x12', '\n', '\x2', '\\', ']', 
		'\a', '\x16', '\x2', '\x2', ']', '\x11', '\x3', '\x2', '\x2', '\x2', '^', 
		'\x61', '\x5', '\x1C', '\xF', '\x2', '_', '\x61', '\x5', '\x1A', '\xE', 
		'\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', 'i', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\a', 
		'\x13', '\x2', '\x2', '\x63', '\x66', '\x5', '\x1C', '\xF', '\x2', '\x64', 
		'\x66', '\x5', '\x1A', '\xE', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x62', '\x3', '\x2', '\x2', '\x2', 'h', 'k', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 
		'j', '\x3', '\x2', '\x2', '\x2', 'j', 'p', '\x3', '\x2', '\x2', '\x2', 
		'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\x13', '\x2', '\x2', 
		'm', 'o', '\x5', '\b', '\x5', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'o', 'r', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 
		'r', 'p', '\x3', '\x2', '\x2', '\x2', 's', '`', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\x3', '\x2', '\x2', '\x2', 't', '\x80', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'z', '\x5', '\b', '\x5', '\x2', 'v', 'w', '\a', '\x13', '\x2', 
		'\x2', 'w', 'y', '\x5', '\b', '\x5', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '~', '\x3', '\x2', '\x2', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', 'u', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', 's', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x13', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x82', '\a', '\x1A', '\x2', '\x2', '\x82', '\x83', '\x5', '\x1C', '\xF', 
		'\x2', '\x83', '\x88', '\x5', '\x4', '\x3', '\x2', '\x84', '\x85', '\a', 
		'\x1B', '\x2', '\x2', '\x85', '\x89', '\x5', '\x14', '\v', '\x2', '\x86', 
		'\x87', '\a', '\x1B', '\x2', '\x2', '\x87', '\x89', '\x5', '\x4', '\x3', 
		'\x2', '\x88', '\x84', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x1F', '\x2', 
		'\x2', '\x8B', '\x8C', '\x5', '\b', '\x5', '\x2', '\x8C', '\x8D', '\a', 
		' ', '\x2', '\x2', '\x8D', '\x90', '\x5', '\x1C', '\xF', '\x2', '\x8E', 
		'\x8F', '\a', '!', '\x2', '\x2', '\x8F', '\x91', '\a', '\'', '\x2', '\x2', 
		'\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', 
		'\x5', '\x18', '\r', '\x2', '\x93', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x98', '\a', '\x1C', '\x2', '\x2', '\x95', '\x99', '\x5', '\x6', 
		'\x4', '\x2', '\x96', '\x99', '\a', '\"', '\x2', '\x2', '\x97', '\x99', 
		'\a', '#', '\x2', '\x2', '\x98', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x1D', '\x2', 
		'\x2', '\x9D', '\x19', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x5', 
		'\x1C', '\xF', '\x2', '\x9F', '\xA0', '\a', '\x3', '\x2', '\x2', '\xA0', 
		'\xA1', '\x5', '\x1C', '\xF', '\x2', '\xA1', '\xA8', '\a', '\x4', '\x2', 
		'\x2', '\xA2', '\xA3', '\a', '\x15', '\x2', '\x2', '\xA3', '\xA4', '\x5', 
		'\x1A', '\xE', '\x2', '\xA4', '\xA5', '\a', '\x16', '\x2', '\x2', '\xA5', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA9', '\x5', '\x1A', '\xE', 
		'\x2', '\xA7', '\xA9', '\x5', '\x1C', '\xF', '\x2', '\xA8', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xB2', '\b', '\xF', '\x1', '\x2', '\xAB', '\xAD', '\a', 
		'\xF', '\x2', '\x2', '\xAC', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xB3', '\t', '\x2', '\x2', '\x2', '\xAF', '\xB3', '\a', 
		'*', '\x2', '\x2', '\xB0', '\xB3', '\a', ')', '\x2', '\x2', '\xB1', '\xB3', 
		'\a', '+', '\x2', '\x2', '\xB2', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB6', '\t', '\x3', '\x2', '\x2', '\xB5', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xC7', '\x5', 
		'\x10', '\t', '\x2', '\xB8', '\xBA', '\t', '\x3', '\x2', '\x2', '\xB9', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBE', '\x5', 
		'\x1E', '\x10', '\x2', '\xBC', '\xBE', '\a', ',', '\x2', '\x2', '\xBD', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC2', '\a', 
		'\x15', '\x2', '\x2', '\xC0', '\xC3', '\x5', '\x1A', '\xE', '\x2', '\xC1', 
		'\xC3', '\x5', '\x1C', '\xF', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x16', '\x2', '\x2', '\xC5', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\f', '\b', '\x2', 
		'\x2', '\xC9', '\xCA', '\t', '\x4', '\x2', '\x2', '\xCA', '\xDB', '\x5', 
		'\x1C', '\xF', '\t', '\xCB', '\xCC', '\f', '\a', '\x2', '\x2', '\xCC', 
		'\xCD', '\t', '\x5', '\x2', '\x2', '\xCD', '\xDB', '\x5', '\x1C', '\xF', 
		'\b', '\xCE', '\xCF', '\f', '\x6', '\x2', '\x2', '\xCF', '\xD0', '\t', 
		'\x6', '\x2', '\x2', '\xD0', '\xDB', '\x5', '\x1C', '\xF', '\a', '\xD1', 
		'\xD2', '\f', '\x5', '\x2', '\x2', '\xD2', '\xD3', '\t', '\a', '\x2', 
		'\x2', '\xD3', '\xDB', '\x5', '\x1C', '\xF', '\x6', '\xD4', '\xD5', '\f', 
		'\x4', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x5', '\x2', '\x2', '\xD6', 
		'\xDB', '\x5', '\x1C', '\xF', '\x5', '\xD7', '\xD8', '\f', '\x3', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', '\x6', '\x2', '\x2', '\xD9', '\xDB', '\x5', 
		'\x1C', '\xF', '\x4', '\xDA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\a', ',', '\x2', '\x2', '\xE0', '\xE1', '\a', '\x17', '\x2', 
		'\x2', '\xE1', '\xE2', '\x5', '\x1C', '\xF', '\x2', '\xE2', '\xE3', '\a', 
		'\x18', '\x2', '\x2', '\xE3', '\x1F', '\x3', '\x2', '\x2', '\x2', ' ', 
		'#', ')', '\x33', ';', '\x43', 'M', 'T', 'W', '`', '\x65', 'i', 'p', 's', 
		'z', '}', '\x7F', '\x88', '\x90', '\x98', '\x9A', '\xA8', '\xAC', '\xB2', 
		'\xB5', '\xB9', '\xBD', '\xC2', '\xC6', '\xDA', '\xDC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
