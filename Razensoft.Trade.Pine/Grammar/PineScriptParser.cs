//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PineScript.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class PineScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		QuestionMark=1, Colon=2, Equals=3, NotEquals=4, GreaterThan=5, LessThan=6, 
		GreaterThanOrEquals=7, LessThanOrEquals=8, Plus=9, Minus=10, Multiply=11, 
		Divide=12, Modulo=13, Comma=14, Arrow=15, OpenParen=16, CloseParen=17, 
		OpenBracket=18, CloseBracket=19, Define=20, Assign=21, Or=22, And=23, 
		Not=24, If=25, Else=26, For=27, To=28, By=29, Break=30, Continue=31, NALiteral=32, 
		IntLiteral=33, FloatLiteral=34, BoolLiteral=35, StringLiteral=36, ColorLiteral=37, 
		Identifier=38, Begin=39, End=40, Whitespace=41;
	public const int
		RULE_script = 0, RULE_block = 1, RULE_statement = 2, RULE_statementList = 3, 
		RULE_variableDeclarationStatement = 4, RULE_variableAssignmentStatement = 5, 
		RULE_variableValue = 6, RULE_functionDeclarationStatement = 7, RULE_functionParameters = 8, 
		RULE_functionBody = 9, RULE_functionCallStatement = 10, RULE_functionArguments = 11, 
		RULE_namedFunctionArgument = 12, RULE_ifStatement = 13, RULE_ifStatementElseBody = 14, 
		RULE_forStatement = 15, RULE_forStatementCounter = 16, RULE_forStatementBody = 17, 
		RULE_expression = 18, RULE_literal = 19, RULE_seriesAccess = 20;
	public static readonly string[] ruleNames = {
		"script", "block", "statement", "statementList", "variableDeclarationStatement", 
		"variableAssignmentStatement", "variableValue", "functionDeclarationStatement", 
		"functionParameters", "functionBody", "functionCallStatement", "functionArguments", 
		"namedFunctionArgument", "ifStatement", "ifStatementElseBody", "forStatement", 
		"forStatementCounter", "forStatementBody", "expression", "literal", "seriesAccess"
	};

	private static readonly string[] _LiteralNames = {
		null, "'?'", "':'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "','", "'=>'", "'('", "')'", "'['", "']'", 
		"'='", "':='", "'or'", "'and'", "'not'", "'if'", "'else'", "'for'", "'to'", 
		"'by'", "'break'", "'continue'", "'na'", null, null, null, null, null, 
		null, "'|BEGIN|'", "'|END|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "QuestionMark", "Colon", "Equals", "NotEquals", "GreaterThan", "LessThan", 
		"GreaterThanOrEquals", "LessThanOrEquals", "Plus", "Minus", "Multiply", 
		"Divide", "Modulo", "Comma", "Arrow", "OpenParen", "CloseParen", "OpenBracket", 
		"CloseBracket", "Define", "Assign", "Or", "And", "Not", "If", "Else", 
		"For", "To", "By", "Break", "Continue", "NALiteral", "IntLiteral", "FloatLiteral", 
		"BoolLiteral", "StringLiteral", "ColorLiteral", "Identifier", "Begin", 
		"End", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PineScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PineScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PineScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PineScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode Begin() { return GetToken(PineScriptParser.Begin, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode End() { return GetToken(PineScriptParser.End, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(Begin);
			State = 45; statementList();
			State = 46; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public VariableAssignmentStatementContext variableAssignmentStatement() {
			return GetRuleContext<VariableAssignmentStatementContext>(0);
		}
		public FunctionDeclarationStatementContext functionDeclarationStatement() {
			return GetRuleContext<FunctionDeclarationStatementContext>(0);
		}
		public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; variableDeclarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; variableAssignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51; functionDeclarationStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 52; functionCallStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 53; ifStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 54; forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 6, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 57; statement();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << If) | (1L << For) | (1L << Identifier) | (1L << Begin))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(PineScriptParser.Identifier, 0); }
		public ITerminalNode Define() { return GetToken(PineScriptParser.Define, 0); }
		public VariableValueContext variableValue() {
			return GetRuleContext<VariableValueContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_variableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(Identifier);
			State = 63; Match(Define);
			State = 64; variableValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(PineScriptParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(PineScriptParser.Assign, 0); }
		public VariableValueContext variableValue() {
			return GetRuleContext<VariableValueContext>(0);
		}
		public VariableAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignmentStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterVariableAssignmentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitVariableAssignmentStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentStatementContext variableAssignmentStatement() {
		VariableAssignmentStatementContext _localctx = new VariableAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(Identifier);
			State = 67; Match(Assign);
			State = 68; variableValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public VariableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterVariableValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitVariableValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableValueContext variableValue() {
		VariableValueContext _localctx = new VariableValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableValue);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Minus:
			case OpenParen:
			case Not:
			case NALiteral:
			case IntLiteral:
			case FloatLiteral:
			case BoolLiteral:
			case StringLiteral:
			case ColorLiteral:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; expression(0);
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; ifStatement();
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72; forStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(PineScriptParser.Identifier, 0); }
		public ITerminalNode OpenParen() { return GetToken(PineScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(PineScriptParser.CloseParen, 0); }
		public ITerminalNode Arrow() { return GetToken(PineScriptParser.Arrow, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		public FunctionDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationStatementContext functionDeclarationStatement() {
		FunctionDeclarationStatementContext _localctx = new FunctionDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(Identifier);
			State = 76; Match(OpenParen);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 77; functionParameters();
				}
			}

			State = 80; Match(CloseParen);
			State = 81; Match(Arrow);
			State = 82; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(PineScriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(PineScriptParser.Identifier, i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PineScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PineScriptParser.Comma, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(Identifier);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 85; Match(Comma);
				State = 86; Match(Identifier);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionBody);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Begin:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; block();
				}
				break;
			case Minus:
			case OpenParen:
			case Not:
			case NALiteral:
			case IntLiteral:
			case FloatLiteral:
			case BoolLiteral:
			case StringLiteral:
			case ColorLiteral:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(PineScriptParser.Identifier, 0); }
		public ITerminalNode OpenParen() { return GetToken(PineScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(PineScriptParser.CloseParen, 0); }
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterFunctionCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitFunctionCallStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionCallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(Identifier);
			State = 97; Match(OpenParen);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Minus) | (1L << OpenParen) | (1L << Not) | (1L << NALiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << BoolLiteral) | (1L << StringLiteral) | (1L << ColorLiteral) | (1L << Identifier))) != 0)) {
				{
				State = 98; functionArguments();
				}
			}

			State = 101; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _positional = new List<ExpressionContext>();
		public NamedFunctionArgumentContext _namedFunctionArgument;
		public IList<NamedFunctionArgumentContext> _named = new List<NamedFunctionArgumentContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PineScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PineScriptParser.Comma, i);
		}
		public NamedFunctionArgumentContext[] namedFunctionArgument() {
			return GetRuleContexts<NamedFunctionArgumentContext>();
		}
		public NamedFunctionArgumentContext namedFunctionArgument(int i) {
			return GetRuleContext<NamedFunctionArgumentContext>(i);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionArguments);
		int _la;
		try {
			int _alt;
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; _localctx._expression = expression(0);
				_localctx._positional.Add(_localctx._expression);
				State = 108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 104; Match(Comma);
						State = 105; _localctx._expression = expression(0);
						_localctx._positional.Add(_localctx._expression);
						}
						} 
					}
					State = 110;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 111; Match(Comma);
					State = 112; _localctx._namedFunctionArgument = namedFunctionArgument();
					_localctx._named.Add(_localctx._namedFunctionArgument);
					}
					}
					State = 117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; _localctx._namedFunctionArgument = namedFunctionArgument();
				_localctx._named.Add(_localctx._namedFunctionArgument);
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 119; Match(Comma);
					State = 120; _localctx._namedFunctionArgument = namedFunctionArgument();
					_localctx._named.Add(_localctx._namedFunctionArgument);
					}
					}
					State = 125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedFunctionArgumentContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(PineScriptParser.Identifier, 0); }
		public ITerminalNode Define() { return GetToken(PineScriptParser.Define, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NamedFunctionArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedFunctionArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterNamedFunctionArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitNamedFunctionArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedFunctionArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedFunctionArgumentContext namedFunctionArgument() {
		NamedFunctionArgumentContext _localctx = new NamedFunctionArgumentContext(Context, State);
		EnterRule(_localctx, 24, RULE_namedFunctionArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(Identifier);
			State = 129; Match(Define);
			State = 130; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(PineScriptParser.If, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Else() { return GetToken(PineScriptParser.Else, 0); }
		public IfStatementElseBodyContext ifStatementElseBody() {
			return GetRuleContext<IfStatementElseBodyContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(If);
			State = 133; expression(0);
			State = 134; block();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 135; Match(Else);
				State = 136; ifStatementElseBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementElseBodyContext : ParserRuleContext {
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfStatementElseBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementElseBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterIfStatementElseBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitIfStatementElseBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementElseBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementElseBodyContext ifStatementElseBody() {
		IfStatementElseBodyContext _localctx = new IfStatementElseBodyContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStatementElseBody);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; ifStatement();
				}
				break;
			case Begin:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ExpressionContext end;
		public ExpressionContext step;
		public ITerminalNode For() { return GetToken(PineScriptParser.For, 0); }
		public ForStatementCounterContext forStatementCounter() {
			return GetRuleContext<ForStatementCounterContext>(0);
		}
		public ITerminalNode To() { return GetToken(PineScriptParser.To, 0); }
		public ITerminalNode Begin() { return GetToken(PineScriptParser.Begin, 0); }
		public ForStatementBodyContext forStatementBody() {
			return GetRuleContext<ForStatementBodyContext>(0);
		}
		public ITerminalNode End() { return GetToken(PineScriptParser.End, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode By() { return GetToken(PineScriptParser.By, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(For);
			State = 144; forStatementCounter();
			State = 145; Match(To);
			State = 146; _localctx.end = expression(0);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==By) {
				{
				State = 147; Match(By);
				State = 148; _localctx.step = expression(0);
				}
			}

			State = 151; Match(Begin);
			State = 152; forStatementBody();
			State = 153; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementCounterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(PineScriptParser.Identifier, 0); }
		public ITerminalNode Define() { return GetToken(PineScriptParser.Define, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementCounterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementCounter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterForStatementCounter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitForStatementCounter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementCounter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementCounterContext forStatementCounter() {
		ForStatementCounterContext _localctx = new ForStatementCounterContext(Context, State);
		EnterRule(_localctx, 32, RULE_forStatementCounter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(Identifier);
			State = 156; Match(Define);
			State = 157; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] Break() { return GetTokens(PineScriptParser.Break); }
		public ITerminalNode Break(int i) {
			return GetToken(PineScriptParser.Break, i);
		}
		public ITerminalNode[] Continue() { return GetTokens(PineScriptParser.Continue); }
		public ITerminalNode Continue(int i) {
			return GetToken(PineScriptParser.Continue, i);
		}
		public ForStatementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterForStatementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitForStatementBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementBodyContext forStatementBody() {
		ForStatementBodyContext _localctx = new ForStatementBodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_forStatementBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 162;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case If:
				case For:
				case Identifier:
				case Begin:
					{
					State = 159; statement();
					}
					break;
				case Break:
					{
					State = 160; Match(Break);
					}
					break;
				case Continue:
					{
					State = 161; Match(Continue);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << If) | (1L << For) | (1L << Break) | (1L << Continue) | (1L << Identifier) | (1L << Begin))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ITerminalNode OpenParen() { return GetToken(PineScriptParser.OpenParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(PineScriptParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode QuestionMark() { return GetToken(PineScriptParser.QuestionMark, 0); }
		public ITerminalNode Colon() { return GetToken(PineScriptParser.Colon, 0); }
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : ExpressionContext {
		public ITerminalNode Minus() { return GetToken(PineScriptParser.Minus, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Multiply() { return GetToken(PineScriptParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(PineScriptParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(PineScriptParser.Modulo, 0); }
		public ITerminalNode Plus() { return GetToken(PineScriptParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(PineScriptParser.Minus, 0); }
		public ITerminalNode GreaterThanOrEquals() { return GetToken(PineScriptParser.GreaterThanOrEquals, 0); }
		public ITerminalNode LessThanOrEquals() { return GetToken(PineScriptParser.LessThanOrEquals, 0); }
		public ITerminalNode GreaterThan() { return GetToken(PineScriptParser.GreaterThan, 0); }
		public ITerminalNode LessThan() { return GetToken(PineScriptParser.LessThan, 0); }
		public ITerminalNode Equals() { return GetToken(PineScriptParser.Equals, 0); }
		public ITerminalNode NotEquals() { return GetToken(PineScriptParser.NotEquals, 0); }
		public ITerminalNode And() { return GetToken(PineScriptParser.And, 0); }
		public ITerminalNode Or() { return GetToken(PineScriptParser.Or, 0); }
		public BinaryOperationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterBinaryOperationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitBinaryOperationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ITerminalNode Not() { return GetToken(PineScriptParser.Not, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public SeriesAccessContext seriesAccess() {
			return GetRuleContext<SeriesAccessContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(PineScriptParser.Identifier, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 167; Match(Minus);
				State = 168; expression(13);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 169; Match(Not);
				State = 170; expression(12);
				}
				break;
			case 3:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 171; literal();
				}
				break;
			case 4:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 172; functionCallStatement();
				}
				break;
			case 5:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 175;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 173; seriesAccess();
					}
					break;
				case 2:
					{
					State = 174; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 177; Match(OpenParen);
				State = 178; expression(0);
				State = 179; Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 209;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 207;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 184;
						((BinaryOperationExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulo))) != 0)) ) {
							((BinaryOperationExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 185; expression(12);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 187;
						((BinaryOperationExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((BinaryOperationExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 188; expression(11);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 189;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 190;
						((BinaryOperationExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GreaterThan) | (1L << LessThan) | (1L << GreaterThanOrEquals) | (1L << LessThanOrEquals))) != 0)) ) {
							((BinaryOperationExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 191; expression(10);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 193;
						((BinaryOperationExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Equals || _la==NotEquals) ) {
							((BinaryOperationExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 194; expression(9);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 195;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 196; ((BinaryOperationExpressionContext)_localctx).op = Match(And);
						State = 197; expression(8);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 198;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 199; ((BinaryOperationExpressionContext)_localctx).op = Match(Or);
						State = 200; expression(7);
						}
						break;
					case 7:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 202; Match(QuestionMark);
						State = 203; expression(0);
						State = 204; Match(Colon);
						State = 205; expression(6);
						}
						break;
					}
					} 
				}
				State = 211;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ColorLiteralContext : LiteralContext {
		public ITerminalNode ColorLiteral() { return GetToken(PineScriptParser.ColorLiteral, 0); }
		public ColorLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterColorLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitColorLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColorLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NALiteralContext : LiteralContext {
		public ITerminalNode NALiteral() { return GetToken(PineScriptParser.NALiteral, 0); }
		public NALiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterNALiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitNALiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNALiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolLiteralContext : LiteralContext {
		public ITerminalNode BoolLiteral() { return GetToken(PineScriptParser.BoolLiteral, 0); }
		public BoolLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : LiteralContext {
		public ITerminalNode StringLiteral() { return GetToken(PineScriptParser.StringLiteral, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatLiteralContext : LiteralContext {
		public ITerminalNode FloatLiteral() { return GetToken(PineScriptParser.FloatLiteral, 0); }
		public FloatLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralContext : LiteralContext {
		public ITerminalNode IntLiteral() { return GetToken(PineScriptParser.IntLiteral, 0); }
		public IntLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterIntLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitIntLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 38, RULE_literal);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntLiteral:
				_localctx = new IntLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 212; Match(IntLiteral);
				}
				break;
			case FloatLiteral:
				_localctx = new FloatLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 213; Match(FloatLiteral);
				}
				break;
			case BoolLiteral:
				_localctx = new BoolLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 214; Match(BoolLiteral);
				}
				break;
			case StringLiteral:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 215; Match(StringLiteral);
				}
				break;
			case ColorLiteral:
				_localctx = new ColorLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 216; Match(ColorLiteral);
				}
				break;
			case NALiteral:
				_localctx = new NALiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 217; Match(NALiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeriesAccessContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(PineScriptParser.Identifier, 0); }
		public ITerminalNode OpenBracket() { return GetToken(PineScriptParser.OpenBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseBracket() { return GetToken(PineScriptParser.CloseBracket, 0); }
		public SeriesAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seriesAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.EnterSeriesAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPineScriptListener typedListener = listener as IPineScriptListener;
			if (typedListener != null) typedListener.ExitSeriesAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPineScriptVisitor<TResult> typedVisitor = visitor as IPineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeriesAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeriesAccessContext seriesAccess() {
		SeriesAccessContext _localctx = new SeriesAccessContext(Context, State);
		EnterRule(_localctx, 40, RULE_seriesAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(Identifier);
			State = 221; Match(OpenBracket);
			State = 222; expression(0);
			State = 223; Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\xE4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', ':', '\n', '\x4', '\x3', '\x5', '\x6', '\x5', '=', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '>', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'L', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', 'Q', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', 'Z', '\n', '\n', '\f', '\n', '\xE', '\n', ']', '\v', '\n', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x61', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '\x66', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 'm', '\n', 
		'\r', '\f', '\r', '\xE', '\r', 'p', '\v', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', 't', '\n', '\r', '\f', '\r', '\xE', '\r', 'w', '\v', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '|', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\x7F', '\v', '\r', '\x5', '\r', '\x81', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x8C', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x90', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x98', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x6', '\x13', '\xA5', '\n', '\x13', '\r', '\x13', '\xE', '\x13', 
		'\xA6', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\xB2', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xB8', '\n', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xD2', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\xD5', '\v', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\xDD', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x2', '\x3', '&', '\x17', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		'\x2', '\x6', '\x3', '\x2', '\r', '\xF', '\x3', '\x2', '\v', '\f', '\x3', 
		'\x2', '\a', '\n', '\x3', '\x2', '\x5', '\x6', '\x2', '\xF7', '\x2', ',', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '.', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\b', '<', '\x3', '\x2', '\x2', '\x2', 
		'\n', '@', '\x3', '\x2', '\x2', '\x2', '\f', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'K', '\x3', '\x2', '\x2', '\x2', '\x10', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x12', 'V', '\x3', '\x2', '\x2', '\x2', '\x14', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x62', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x86', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x91', '\x3', '\x2', '\x2', '\x2', '\"', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xA4', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '(', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xDE', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x5', '\b', 
		'\x5', '\x2', '-', '\x3', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', 
		')', '\x2', '\x2', '/', '\x30', '\x5', '\b', '\x5', '\x2', '\x30', '\x31', 
		'\a', '*', '\x2', '\x2', '\x31', '\x5', '\x3', '\x2', '\x2', '\x2', '\x32', 
		':', '\x5', '\x4', '\x3', '\x2', '\x33', ':', '\x5', '\n', '\x6', '\x2', 
		'\x34', ':', '\x5', '\f', '\a', '\x2', '\x35', ':', '\x5', '\x10', '\t', 
		'\x2', '\x36', ':', '\x5', '\x16', '\f', '\x2', '\x37', ':', '\x5', '\x1C', 
		'\xF', '\x2', '\x38', ':', '\x5', ' ', '\x11', '\x2', '\x39', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\x34', '\x3', '\x2', '\x2', '\x2', '\x39', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		':', '\a', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x5', '\x6', '\x4', 
		'\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', 
		'\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', 
		'\x2', '?', '\t', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '(', 
		'\x2', '\x2', '\x41', '\x42', '\a', '\x16', '\x2', '\x2', '\x42', '\x43', 
		'\x5', '\xE', '\b', '\x2', '\x43', '\v', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\a', '(', '\x2', '\x2', '\x45', '\x46', '\a', '\x17', '\x2', 
		'\x2', '\x46', 'G', '\x5', '\xE', '\b', '\x2', 'G', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'L', '\x5', '&', '\x14', '\x2', 'I', 'L', '\x5', '\x1C', 
		'\xF', '\x2', 'J', 'L', '\x5', ' ', '\x11', '\x2', 'K', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\xF', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', 
		'(', '\x2', '\x2', 'N', 'P', '\a', '\x12', '\x2', '\x2', 'O', 'Q', '\x5', 
		'\x12', '\n', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', 
		'\x13', '\x2', '\x2', 'S', 'T', '\a', '\x11', '\x2', '\x2', 'T', 'U', 
		'\x5', '\x14', '\v', '\x2', 'U', '\x11', '\x3', '\x2', '\x2', '\x2', 'V', 
		'[', '\a', '(', '\x2', '\x2', 'W', 'X', '\a', '\x10', '\x2', '\x2', 'X', 
		'Z', '\a', '(', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', 
		']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '\x13', '\x3', '\x2', '\x2', 
		'\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x5', '\x4', 
		'\x3', '\x2', '_', '\x61', '\x5', '&', '\x14', '\x2', '`', '^', '\x3', 
		'\x2', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', '(', '\x2', '\x2', '\x63', 
		'\x65', '\a', '\x12', '\x2', '\x2', '\x64', '\x66', '\x5', '\x18', '\r', 
		'\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 'h', 
		'\a', '\x13', '\x2', '\x2', 'h', '\x17', '\x3', '\x2', '\x2', '\x2', 'i', 
		'n', '\x5', '&', '\x14', '\x2', 'j', 'k', '\a', '\x10', '\x2', '\x2', 
		'k', 'm', '\x5', '&', '\x14', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 
		'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'u', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '\x10', '\x2', '\x2', 
		'r', 't', '\x5', '\x1A', '\xE', '\x2', 's', 'q', '\x3', '\x2', '\x2', 
		'\x2', 't', 'w', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', '\x81', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'x', '}', '\x5', '\x1A', 
		'\xE', '\x2', 'y', 'z', '\a', '\x10', '\x2', '\x2', 'z', '|', '\x5', '\x1A', 
		'\xE', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '|', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x81', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x80', 'i', '\x3', '\x2', '\x2', '\x2', 
		'\x80', 'x', '\x3', '\x2', '\x2', '\x2', '\x81', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\a', '(', '\x2', '\x2', '\x83', '\x84', 
		'\a', '\x16', '\x2', '\x2', '\x84', '\x85', '\x5', '&', '\x14', '\x2', 
		'\x85', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x1B', 
		'\x2', '\x2', '\x87', '\x88', '\x5', '&', '\x14', '\x2', '\x88', '\x8B', 
		'\x5', '\x4', '\x3', '\x2', '\x89', '\x8A', '\a', '\x1C', '\x2', '\x2', 
		'\x8A', '\x8C', '\x5', '\x1E', '\x10', '\x2', '\x8B', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x90', '\x5', '\x1C', '\xF', '\x2', 
		'\x8E', '\x90', '\x5', '\x4', '\x3', '\x2', '\x8F', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\a', '\x1D', '\x2', '\x2', 
		'\x92', '\x93', '\x5', '\"', '\x12', '\x2', '\x93', '\x94', '\a', '\x1E', 
		'\x2', '\x2', '\x94', '\x97', '\x5', '&', '\x14', '\x2', '\x95', '\x96', 
		'\a', '\x1F', '\x2', '\x2', '\x96', '\x98', '\x5', '&', '\x14', '\x2', 
		'\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', 
		'\a', ')', '\x2', '\x2', '\x9A', '\x9B', '\x5', '$', '\x13', '\x2', '\x9B', 
		'\x9C', '\a', '*', '\x2', '\x2', '\x9C', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9E', '\a', '(', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x16', 
		'\x2', '\x2', '\x9F', '\xA0', '\x5', '&', '\x14', '\x2', '\xA0', '#', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA5', '\x5', '\x6', '\x4', '\x2', 
		'\xA2', '\xA5', '\a', ' ', '\x2', '\x2', '\xA3', '\xA5', '\a', '!', '\x2', 
		'\x2', '\xA4', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\b', '\x14', '\x1', '\x2', '\xA9', 
		'\xAA', '\a', '\f', '\x2', '\x2', '\xAA', '\xB8', '\x5', '&', '\x14', 
		'\xF', '\xAB', '\xAC', '\a', '\x1A', '\x2', '\x2', '\xAC', '\xB8', '\x5', 
		'&', '\x14', '\xE', '\xAD', '\xB8', '\x5', '(', '\x15', '\x2', '\xAE', 
		'\xB8', '\x5', '\x16', '\f', '\x2', '\xAF', '\xB2', '\x5', '*', '\x16', 
		'\x2', '\xB0', '\xB2', '\a', '(', '\x2', '\x2', '\xB1', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x12', '\x2', 
		'\x2', '\xB4', '\xB5', '\x5', '&', '\x14', '\x2', '\xB5', '\xB6', '\a', 
		'\x13', '\x2', '\x2', '\xB6', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBA', '\f', '\r', '\x2', '\x2', '\xBA', '\xBB', '\t', 
		'\x2', '\x2', '\x2', '\xBB', '\xD2', '\x5', '&', '\x14', '\xE', '\xBC', 
		'\xBD', '\f', '\f', '\x2', '\x2', '\xBD', '\xBE', '\t', '\x3', '\x2', 
		'\x2', '\xBE', '\xD2', '\x5', '&', '\x14', '\r', '\xBF', '\xC0', '\f', 
		'\v', '\x2', '\x2', '\xC0', '\xC1', '\t', '\x4', '\x2', '\x2', '\xC1', 
		'\xD2', '\x5', '&', '\x14', '\f', '\xC2', '\xC3', '\f', '\n', '\x2', '\x2', 
		'\xC3', '\xC4', '\t', '\x5', '\x2', '\x2', '\xC4', '\xD2', '\x5', '&', 
		'\x14', '\v', '\xC5', '\xC6', '\f', '\t', '\x2', '\x2', '\xC6', '\xC7', 
		'\a', '\x19', '\x2', '\x2', '\xC7', '\xD2', '\x5', '&', '\x14', '\n', 
		'\xC8', '\xC9', '\f', '\b', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x18', 
		'\x2', '\x2', '\xCA', '\xD2', '\x5', '&', '\x14', '\t', '\xCB', '\xCC', 
		'\f', '\a', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x3', '\x2', '\x2', '\xCD', 
		'\xCE', '\x5', '&', '\x14', '\x2', '\xCE', '\xCF', '\a', '\x4', '\x2', 
		'\x2', '\xCF', '\xD0', '\x5', '&', '\x14', '\b', '\xD0', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\'', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xDD', '\a', '#', '\x2', 
		'\x2', '\xD7', '\xDD', '\a', '$', '\x2', '\x2', '\xD8', '\xDD', '\a', 
		'%', '\x2', '\x2', '\xD9', '\xDD', '\a', '&', '\x2', '\x2', '\xDA', '\xDD', 
		'\a', '\'', '\x2', '\x2', '\xDB', '\xDD', '\a', '\"', '\x2', '\x2', '\xDC', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\a', '(', '\x2', '\x2', '\xDF', '\xE0', '\a', 
		'\x14', '\x2', '\x2', '\xE0', '\xE1', '\x5', '&', '\x14', '\x2', '\xE1', 
		'\xE2', '\a', '\x15', '\x2', '\x2', '\xE2', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x39', '>', 'K', 'P', '[', '`', '\x65', 'n', 'u', '}', 
		'\x80', '\x8B', '\x8F', '\x97', '\xA4', '\xA6', '\xB1', '\xB7', '\xD1', 
		'\xD3', '\xDC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
