//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PineScript.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PineScriptParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IPineScriptListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.script"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScript([NotNull] PineScriptParser.ScriptContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.script"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScript([NotNull] PineScriptParser.ScriptContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] PineScriptParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] PineScriptParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementList([NotNull] PineScriptParser.StatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementList([NotNull] PineScriptParser.StatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] PineScriptParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] PineScriptParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.variableDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationStatement([NotNull] PineScriptParser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.variableDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationStatement([NotNull] PineScriptParser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.variableAssignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableAssignmentStatement([NotNull] PineScriptParser.VariableAssignmentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.variableAssignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableAssignmentStatement([NotNull] PineScriptParser.VariableAssignmentStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.variableValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableValue([NotNull] PineScriptParser.VariableValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.variableValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableValue([NotNull] PineScriptParser.VariableValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.functionDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclarationStatement([NotNull] PineScriptParser.FunctionDeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.functionDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclarationStatement([NotNull] PineScriptParser.FunctionDeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.functionParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionParameters([NotNull] PineScriptParser.FunctionParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.functionParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionParameters([NotNull] PineScriptParser.FunctionParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.functionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionBody([NotNull] PineScriptParser.FunctionBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.functionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionBody([NotNull] PineScriptParser.FunctionBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.functionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallStatement([NotNull] PineScriptParser.FunctionCallStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.functionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallStatement([NotNull] PineScriptParser.FunctionCallStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.functionArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionArguments([NotNull] PineScriptParser.FunctionArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.functionArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionArguments([NotNull] PineScriptParser.FunctionArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.namedFunctionArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamedFunctionArgument([NotNull] PineScriptParser.NamedFunctionArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.namedFunctionArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamedFunctionArgument([NotNull] PineScriptParser.NamedFunctionArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] PineScriptParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] PineScriptParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.ifStatementElseBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatementElseBody([NotNull] PineScriptParser.IfStatementElseBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.ifStatementElseBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatementElseBody([NotNull] PineScriptParser.IfStatementElseBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] PineScriptParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] PineScriptParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.forStatementCounter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatementCounter([NotNull] PineScriptParser.ForStatementCounterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.forStatementCounter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatementCounter([NotNull] PineScriptParser.ForStatementCounterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.forStatementBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatementBody([NotNull] PineScriptParser.ForStatementBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.forStatementBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatementBody([NotNull] PineScriptParser.ForStatementBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] PineScriptParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] PineScriptParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] PineScriptParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] PineScriptParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinusExpression([NotNull] PineScriptParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinusExpression([NotNull] PineScriptParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryOperationExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryOperationExpression([NotNull] PineScriptParser.BinaryOperationExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryOperationExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryOperationExpression([NotNull] PineScriptParser.BinaryOperationExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] PineScriptParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] PineScriptParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] PineScriptParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] PineScriptParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionCallExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] PineScriptParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionCallExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] PineScriptParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] PineScriptParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="PineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] PineScriptParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntLiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntLiteral([NotNull] PineScriptParser.IntLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntLiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntLiteral([NotNull] PineScriptParser.IntLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FloatLiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloatLiteral([NotNull] PineScriptParser.FloatLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FloatLiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloatLiteral([NotNull] PineScriptParser.FloatLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BoolLiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolLiteral([NotNull] PineScriptParser.BoolLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolLiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolLiteral([NotNull] PineScriptParser.BoolLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringLiteral([NotNull] PineScriptParser.StringLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringLiteral([NotNull] PineScriptParser.StringLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ColorLiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColorLiteral([NotNull] PineScriptParser.ColorLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ColorLiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColorLiteral([NotNull] PineScriptParser.ColorLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NALiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNALiteral([NotNull] PineScriptParser.NALiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NALiteral</c>
	/// labeled alternative in <see cref="PineScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNALiteral([NotNull] PineScriptParser.NALiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PineScriptParser.seriesAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSeriesAccess([NotNull] PineScriptParser.SeriesAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PineScriptParser.seriesAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSeriesAccess([NotNull] PineScriptParser.SeriesAccessContext context);
}
